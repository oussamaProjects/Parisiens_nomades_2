/**
 * Multi accessories for PrestaShop
 *
 * @author    PrestaMonster
 * @copyright PrestaMonster
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**
 * All js for version 1.7.x
 */
//accessoriesprice_16.js


//hsma_display_style.js
var HsMaDisplayStyle = {
    // define value of style checkbox
    CHECKBOX: 0,
    // define value of style dropdown
    DROPDOWN: 1,
    // define value of style radio
    RADIO: 2
};

//admin_product_setting.js
var AdminProductSetting = function (selectors, params)
{
    /**
     * Buy product & accessory together is not required
     * @var int
     */
    this.BUY_TOGETHER_NO = 0;

    /*
     * Buy product & accessory together is required
     * @var int
     */
    this.BUY_TOGETHER_YES = 1;

    /*
     * Use global setting
     * In this case buy together will be equal 0 or 1.
     * @var int
     */
    this.BUY_TOGETHER_USE_DEFAULT = 2;

    /**
     * Admin will be choose accessories which are buy together with main product.
     * @var int
     */
    this.BUY_TOGETHER_REQUIRED = 3;

    /**
     * Callback change setting buy main product & accessory together
     */
    this._toggleColumnRequiredHandler;

    /**
     * Define all params default of this class
     */
    this._params = {
        ajaxUrls: null, // list of ajax urls
        messageError: 'error', // Message error
        customDisplayedName: 0, // Store setting buy main product & accessory together
        buyMainTogether: 0 // Store setting use custom displayed names for this product
    };

    /**
     * Define all selectors default of class
     */
    this._selectors = {
        buyTogether: '.hsma_product_setting select', // Select box setting buy main product & accessory together
        productSetting: '.hsma_product_setting',
        customDisplayedNames: '.hsma_product_setting input[name="custom_displayed_name"]' // Input use custom displayed names for this product
    };

    $.extend(this._params, params);
    $.extend(this._selectors, selectors);
    AdminProductSetting.instance = this;

    this.init = function ()
    {
        if (typeof this._toggleColumnRequiredHandler === 'function') {
            $(document).on('change', AdminProductSetting.instance._selectors.buyTogether, function () {
                AdminProductSetting.instance._toggleColumnRequiredHandler(this);
                AdminProductSetting.instance._changeBuyTogether(this);
            });
        }

        // Event change setting use cutom displayed names for this product
        $(document).on('change', AdminProductSetting.instance._selectors.customDisplayedNames, AdminProductSetting.instance._onChangeCustomDisplayedNames);
    };

    /**
     * Change product setting buy together
     * @param {Object} handler
     */
    this.onChangeBuyTogether = function (handler)
    {
        if (typeof handler === 'function') {
            this._toggleColumnRequiredHandler = handler;
        }
    };

    this._changeBuyTogether = function (element)
    {
        var buyTogether = parseInt($(element).val());
        var idProduct = AdminProductSetting.instance._getIdProduct(element);
        if (!idProduct)
            return;
        $.ajax({
            type: 'POST',
            headers: {"cache-control": "no-cache"},
            url: AdminProductSetting.instance._params.ajaxUrls.ajaxChangeProductSettingBuyTogether,
            async: true,
            cache: false,
            dataType: "json",
            data: 'buy_together=' + buyTogether + '&id_product=' + idProduct,
            success: function (data)
            {
                if (data.success)
                    AdminProductSetting.instance._params.buyMainTogether = buyTogether;
                else
                    alert(AdminProductSetting.instance._params.messageError);

            },
            error: function ()
            {
                alert(AdminProductSetting.instance._params.messageError);
            }
        });
    };

    /**
     * Change setting use custom displayed names for this product
     * @param {Object} element
     */
    this._onChangeCustomDisplayedNames = function (element)
    {
        var customDisplayedName = parseInt($(element.target).val());
        var idProduct = AdminProductSetting.instance._getIdProduct(element.target);
        if (!idProduct)
            return;
        $.ajax({
            type: 'POST',
            headers: {"cache-control": "no-cache"},
            url: AdminProductSetting.instance._params.ajaxUrls.ajaxChangeCustomDisplayedName,
            async: true,
            cache: false,
            dataType: "json",
            data: 'custom_displayed_name=' + customDisplayedName + '&id_product=' + idProduct,
            success: function (data)
            {
                if (data.success)
                    AdminProductSetting.instance._params.customDisplayedName = customDisplayedName;
                else
                    alert(AdminProductSetting.instance._params.messageError);
            },
            error: function ()
            {
                alert(AdminProductSetting.instance._params.messageError);
            }
        });
    };

    /**
     * Get id main product
     * @param {object} element
     * @returns {int}
     */
    this._getIdProduct = function (element)
    {
        return parseInt($(element).parents(AdminProductSetting.instance._selectors.productSetting).data('id-product'));
    };

};

//pricetable.js

/**
 * Multi accessories for PrestaShop
 *
 * @author    PrestaMonster
 * @copyright PrestaMonster
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**
 * handle envent
 * @param {json} options
 * @returns {PriceTable}
 */
var PriceTable = function (options)
{
    /**
     * contain all products accessories
     */
    this.products = typeof options.products !== 'undefined' ? options.products : null;

    /**
     * contain current id product
     */
    this.randomMainProductId = typeof options.randomMainProductId !== 'undefined' ? options.randomMainProductId : null;

    /**
     * contain text translate "sub total"
     */
    this.subTotal = typeof options.subTotal !== 'undefined' ? options.subTotal : null;

    /**
     * Change the main price when adding or removing accessories
     */
    this.changeMainPrice = typeof options.changeMainPrice !== 'undefined' ? options.changeMainPrice : 0;

    /**
     * Show table price
     * 1 => show
     * 0 => hide
     */
    this.showTablePrice = typeof options.showTablePrice !== 'undefined' ? options.showTablePrice : 0;

    /**
     * Show combination info in table price
     * 1 => show
     * 0 => hide
     */
    this.showCombination = typeof options.showCombination !== 'undefined' ? options.showCombination : 0;

    /**
     * Define warning accessory is out of stock
     */
    this.warningOutOfStock = options.warningOutOfStock;

    /**
     * Define warning accessory is out of stock
     */
    this.warningNotEnoughProduct = options.warningNotEnoughProduct;

    /**
     * Define warning accessory is out of stock
     */
    this.warningCustomQuantity = options.warningCustomQuantity;

    /**
     * Show Option Image
     * 1 => show
     * 0 => hide
     */
    this.showOptionImage = options.showOptionImage;

    /**
     * contain all selected products
     */
    this.accessories = {};

    PriceTable.instance = this;

    /**
     * Define array selectors
     */
    this._selectors = {
        idCombination: '#idCombination', // define id combination
        mainProductPrice: '#our_price_display', // the box which contains official price of the main item
        accessoryItem: '.accessory_item', // Class of input which select accessory if you want add this accessory to cart.
        classNameAccessoryItem: 'accessory_item', // Class name of input which select accessory if you want add this accessory to cart.
        accessoriesGroup: '.accessories_group', // define class selecte box accessories
        groupAccessories: '#group_accessories', // define id group accessories
        classNameAccessoriesGroup: 'accessories_group', // define class name accessories group
        accessoriesTablePriceContent: '.accessories_table_price_content', // define class table contain price table
        accessoriesCustomQuantity: '.add_accessory_to_cart .custom_quantity', // define class name of custom quantity of each accessory
        productAttributeColor: '.color_pick',
        productAttributeSelect: '.attribute_select',
        productAttributeRadio: '.attribute_radio',
        quantityWanted: '#quantity_wanted', // defined class input product quantity
        classChangeQuantity: '#product .product_quantity_down, #product .product_quantity_up', // defined class input change quantity
        productCombination: '#group_accessories .product-combination', // defined class select option change combination
        classProductCombination: '.product-combination', // defined class select option change combination
        classProductDDSlick: 'ddproductslick',
        classError: 'error-number', // define class name error,
        accessoriesGroupCombination: '#group_accessories .accessories_group_combination', // define class div combination
        classProductImgLink: '.product_img_link', // define class product image link
        idAddToCartButton: '#add-to-cart-or-refresh [data-button-action="add-to-cart"]',
        classMessageError: '.message_error',
        iconShowBlockGroup: '#group_accessories .option-row h4',
        iconExpand: 'remove', // Name of icon expand +
        iconCollapse: 'add', // Name of icon collapse -
        contentGroup: 'content_group', // Name of class content group
        accessoryGroup: '.option-row',
    };

    /**
     * Check a value is interger number or not
     * @param {string} value
     * @returns {@exp;reg@call;test}
     */
    this.isIntegerNumber = function (value) {
        var reg = /^\d+$/;
        return reg.test(value);
    };

    /**
     * Event load default
     */
    this.onLoad = function ()
    {
        if ($.isEmptyObject(this.products))
            return;
        var idCombination = parseInt($(PriceTable.instance._selectors.idCombination).val());
        if (idCombination > 0) {
            idCombination = isNaN(idCombination) ? 0 : idCombination;
            PriceTable.instance.products[PriceTable.instance.randomMainProductId].default_id_product_attribute = idCombination;
        }
        PriceTable.instance.triggerTablePrice();
        this._renderCombinations();
        this._insertAccessoriesToButtonForm();
        $(".dd-options li").change(function () {
            var value = $(".dd-options li option:selected").find('span').hasClass('warning_out_of_stock');
            if (value)
                $(".dd-options li option:selected").attr('disabled', 'disabled');
        });
        // update table price
        $(document).on('change', this._selectors.idCombination, function () {
            PriceTable.instance.products[PriceTable.instance.randomMainProductId].default_id_product_attribute = $(this).val();
            PriceTable.instance.scrollToTablePrice();
            PriceTable.instance._updateMainProductPrice();
            PriceTable.instance._renderTablePrice();

        });
        // For prestashop 1.7 change main product combination
        prestashop.on('updateProduct', function (event) {
            if (typeof event.refreshUrl == "undefined") {
                event.refreshUrl = true;
            }
            $.post(event.reason.productUrl, {ajax: '1', action: 'refresh'}, null, 'json').then(function (resp) {
                var quantity_wanted = parseInt($(PriceTable.instance._selectors.quantityWanted).val());
                if (isNaN(quantity_wanted)){
                    quantity_wanted = 1;
                }
                PriceTable.instance.products[PriceTable.instance.randomMainProductId].default_id_product_attribute = resp.id_product_attribute;
                PriceTable.instance.products[PriceTable.instance.randomMainProductId].qty = quantity_wanted;
                $(document).ajaxComplete(function (event, xhr, settings) {
                    PriceTable.instance._renderTablePrice(true);
                });
                if (event.refreshUrl) {
                    window.history.pushState({id_product_attribute: resp.id_product_attribute}, undefined, resp.product_url);
                }
                prestashop.emit('updatedProduct', resp);
            });



        });
        // change combination
        $(document).on('click', this._selectors.iconShowBlockGroup, function () {
            var element = $(this).find('i');
            PriceTable.instance._onClickBlockGroup(element);
        });
        // change combination
        $(document).on('focus', this._selectors.productCombination, function () {
            previousValueOfCombination = $(this).val();
        });
        $(document).on('change', this._selectors.productCombination, function () {
            PriceTable.instance.scrollToTablePrice();
            var randomId = $(this).data('randomid');
            var idProductAttribute = parseInt($(this).val());
            customQuantity = $(this).parent().parent().find(PriceTable.instance._selectors.accessoriesCustomQuantity).val();
            customQuantity = typeof customQuantity !== 'undefined' ? customQuantity : PriceTable.instance.products[randomId]['qty'];
            var parentsElement = $(this).parents('tr');
            if (!PriceTable.instance.products[randomId]['combinations'][idProductAttribute]['out_of_stock'] && PriceTable.instance.products[randomId]['combinations'][idProductAttribute]['avaiable_quantity'] < customQuantity)
            {
                $(this).val(previousValueOfCombination);
                alert(PriceTable.instance.warningOutOfStock);
                window.getSelection().removeAllRanges();
            } else
            {
                previousValueOfCombination = $(this).val();
                PriceTable.instance.products[randomId].default_id_product_attribute = idProductAttribute;
                PriceTable.instance._updateMainProductPrice();
                PriceTable.instance._renderTablePrice();
                PriceTable.instance._updateAccessoryPrice(PriceTable.instance.products[randomId]);
                PriceTable.instance._updateProductCombinationImage(parentsElement, PriceTable.instance.products[randomId]);
            }


        });

        // Event click on an accessor item
        $(document).on('click', this._selectors.accessoryItem, function () {
            var selectedValue = $(this).val();
            if (selectedValue != 0) {
                PriceTable.instance.scrollToTablePrice();
            }
            if (parseInt(window.buyTogetherOption) === parseInt(adminProductSetting.BUY_TOGETHER_YES))
            {
                if ($(this).parents('table').find(PriceTable.instance._selectors.accessoryItem + ':checked').length === 0)
                {
                    $('<span class="message_error">' + alertMessage + '</span>').insertBefore($(this).parents('table'));
                } else {
                    $(this).parents('table').prev(PriceTable.instance._selectors.classMessageError).remove();
                    PriceTable.instance.scrollToTablePrice();
                }
            } else if (parseInt(window.buyTogetherOption) === parseInt(adminProductSetting.BUY_TOGETHER_REQUIRED) && $(this).attr('type') === 'checkbox')
            {
                if (parseInt($(this).data('required-buy-together')) === 1)
                {
                    alert(alertMessage);
                    window.getSelection().removeAllRanges();
                    $(this).parent().addClass('checked');
                    $(this).attr("checked", "checked");
                }
                PriceTable.instance.scrollToTablePrice();
            }
            if ($(this).is(':checked')) {
                currentQty = parseInt($(this).parents('tr').find(PriceTable.instance._selectors.accessoriesCustomQuantity).val());
                // Set custom quantity to 1 if an accessory is selected
                $(this).parents('tr').find(PriceTable.instance._selectors.accessoriesCustomQuantity).val(currentQty > 0 ? currentQty : 1);
            }
            PriceTable.instance._initProductAccessories();
            PriceTable.instance._renderTablePrice();
        });

        // Change main product's combination
        $(document).on('click', this._selectors.productAttributeColor, function () {
            PriceTable.instance._renderTablePrice(true);
        });
        $(document).on('click', this._selectors.productAttributeRadio, function () {
            PriceTable.instance._renderTablePrice(true);
        });
        $(document).on('change', this._selectors.productAttributeSelect, function () {
            PriceTable.instance._renderTablePrice(true);
        });

        //$(this._selectors.accessoriesGroup).data('pre', $(this).val());
        $(this._selectors.accessoriesGroup).on('focus', function () {
            // Store the current value on focus and on change
            previousAccessory = this.value;
        }).change(function () {
            PriceTable.instance.scrollToTablePrice();
            var randomId = $(this).find(':selected').data('randomid');
            if (typeof randomId !== 'undefined')
            {
                var customQuantity = PriceTable.instance.products[randomId].custom_quantity ? PriceTable.instance.products[randomId].custom_quantity : PriceTable.instance.products[randomId].default_quantity;
                var idProductAttribute = this.options[this.selectedIndex].getAttribute('data-id-product-attribute');
                var isOutOfStock = false;
                if (!PriceTable.instance.products[randomId]['out_of_stock'] && PriceTable.instance.products[randomId]['avaiable_quantity'] < customQuantity)
                    isOutOfStock = true;

                if (typeof idProductAttribute !== 'undefined' &&
                        typeof PriceTable.instance.products[randomId]['combinations'][idProductAttribute] !== 'undefined' &&
                        !PriceTable.instance.products[randomId]['combinations'][idProductAttribute]['out_of_stock'] &&
                        PriceTable.instance.products[randomId]['combinations'][idProductAttribute]['avaiable_quantity'] < customQuantity
                        )
                    isOutOfStock = true;

                if (isOutOfStock)
                {
                    $(this).val(previousAccessory);
                    alert(PriceTable.instance.warningOutOfStock);
                    window.getSelection().removeAllRanges();
                } else
                {
                    if (typeof PriceTable.instance.products[randomId] !== 'undefined' && Object.size(PriceTable.instance.products[randomId]['combinations']) > 1)
                        PriceTable.instance._renderCombination(randomId, false);
                    else
                        $(this).next().html('');
                    previousAccessory = this.value;
                }
            } else
            {
                $(this).next().html('');
                previousAccessory = this.value;
            }
            PriceTable.instance._initProductAccessories();
            PriceTable.instance._renderTablePrice();
        });

        // Event change the quantity of main product
        $(document).on('keyup', this._selectors.quantityWanted, function () {
            var qty = $(this).val();
            isIntegerNumber = PriceTable.instance.isIntegerNumber(qty);
            if (!isIntegerNumber)
            {
                $(this).addClass(PriceTable.instance._selectors.classError);
                $(this).select();
            } else
                $(this).removeClass(PriceTable.instance._selectors.classError);

            PriceTable.instance.triggerTablePrice();

        });

        // up & down qty input type number button on PS 1.6
        $(document).on('click', this._selectors.quantityWanted, function () {
            PriceTable.instance.triggerTablePrice();

        });

        // up & down qty button on PS 1.6
        $(document).on('click', this._selectors.classChangeQuantity, function () {
            PriceTable.instance.triggerTablePrice();

        });

        if ($('#product' + ' ' + this._selectors.groupAccessories + ' ' + this._selectors.accessoriesCustomQuantity).length > 0)
        {
            // Event change the custom quantity value
            $(this._selectors.accessoriesCustomQuantity).on('focus', function () {
                // Store the current value on focus and on change
                previousAccessoryQuantity = this.value;
            }).change(function () {
                var newQuantity = parseInt($(this).val());
                var randomId = 0;
                var idCombination = 0;
                // in calse dropdown + show image are enabled   
                if ($(this).parent().parent().find('.dd-selected-value').length > 0)
                {
                    randomId = $(this).parent().parent().find('.randomid-group').data('randomid');
                    var idGroup = $(this).parent().parent().find('.randomid-group').data('idgroup');
                    idCombination = $('#combination_' + idGroup).find('.dd-selected-value').val();
                } else {
                    randomId = typeof $(this).parents('tr').find(':checked').data('randomid') !== 'undefined' ? $(this).parents('tr').find(':checked').data('randomid') : $(this).parents('tr').find(PriceTable.instance._selectors.accessoryItem).data('randomid');
                    idCombination = typeof $(this).parents('tr').find(':checked').data('id-product-attribute') !== 'undefined' ? $(this).parents('tr').find(':checked').data('id-product-attribute') : $(this).parents('tr').find(PriceTable.instance._selectors.accessoryItem).data('id-product-attribute');
                }
                if (typeof randomId === 'undefined' || randomId === 0)
                    return;

                var minQuantity = parseInt(PriceTable.instance.products[randomId]['min_quantity']);
                if (newQuantity < minQuantity) {
                    $(this).val($(this).data('custom-quantity'));
                    alert(PriceTable.instance.warningCustomQuantity.format(minQuantity));
                    window.getSelection().removeAllRanges();
                    return;
                }
                //var isStockAvailable = PriceTable.instance.isStockAvailable(randomId, newQuantity, idCombination);
                idCombination = typeof idCombination !== 'undefined' ? idCombination : 0;
                var idAccessory = PriceTable.instance.products[randomId]['id_accessory'];
                if (!idAccessory && typeof window.ajaxRenderAccessoriesUrl === 'undefined')
                    return;
                var currentThis = this;
                $.ajax({
                    type: 'POST',
                    headers: {"cache-control": "no-cache"},
                    url: window.ajaxRenderAccessoriesUrl,
                    async: true,
                    cache: false,
                    dataType: "json",
                    data: {
                        'ajax': true,
                        'id_accessory': idAccessory,
                        'id_accessory_combination': idCombination,
                        'new_quantity': newQuantity,
                        'action': 'isStockAvailable'
                    },
                    success: function (jsonData)
                    {
                        if (!jsonData.hasError)
                        {
                            isIntegerNumber = PriceTable.instance.isIntegerNumber(newQuantity);
                            if (!isIntegerNumber)
                            {
                                $(currentThis).addClass(PriceTable.instance._selectors.classError);
                                $(currentThis).select();
                            } else
                            {
                                $(currentThis).removeClass(PriceTable.instance._selectors.classError);
                                PriceTable.instance.products[randomId]['custom_quantity'] = newQuantity;
                                $(currentThis).data('custom-quantity', newQuantity);
                            }
                        } else
                        {

                            var avaiableQuantity = PriceTable.instance.products[randomId]['avaiable_quantity'];
                            $(currentThis).val(avaiableQuantity);
                            $(currentThis).data('custom-quantity', avaiableQuantity);
                            alert(jsonData.errors);
                            window.getSelection().removeAllRanges();
                        }
                    },
                    complete: function () {
                        if (parseInt($(currentThis).val()) > 0) {
                            $(currentThis).parents('tbody').find('.radio').find('span').removeClass('checked');
                            $(currentThis).parents('tbody').find('.radio').find('span input').prop('checked', false);
                            $(currentThis).parents('tr').find('.checker, .radio').find('span').addClass('checked');
                            $(currentThis).parents('tr').find('.checker, .radio').find('span input').prop('checked', true);
                            // For prestashop 1.7
                            $(currentThis).parents('tr').find('.accessory_item').prop('checked', true);
                            //$(currentThis).parents('tbody').find('.accessory_item').prop('checked', true);
                        } else {
                            $(currentThis).parents('tr').find('.checker, .radio').find('span').removeClass('checked');
                            $(currentThis).parents('tr').find('.checker, .radio').find('span input').prop('checked', false);
                            // For prestashop 1.7
                            $(currentThis).parents('tr').find('.accessory_item').prop('checked', false);
                        }
                        PriceTable.instance._initProductAccessories();
                        PriceTable.instance._renderTablePrice();
                        PriceTable.instance.scrollToTablePrice();
                    }
                });

            });
        }

        // Event show fancybox when customer click product image
        $(document).on('click', this._selectors.classProductImgLink, function (e) {
            $(PriceTable.instance._selectors.classProductImgLink).fancybox({
                'hideOnContentClick': false
            });
        });

    };
    /**
     * Get all selected products if block accessories
     */
    this._initProductAccessories = function ()
    {
        this.accessories = {};
        var selector = this._selectors;

        // in case option image for dropdown is enable    
        if ($(selector.groupAccessories).find('.dd-selected-value'))
        {
            $(selector.groupAccessories + ' .randomid-group').each(function () {
                var randomId = $(this).data('randomid');
                if (typeof PriceTable.instance.products[randomId] !== 'undefined')
                {
                    var quantity = PriceTable.instance.products[randomId].custom_quantity ? PriceTable.instance.products[randomId].custom_quantity : PriceTable.instance.products[randomId].default_quantity;
                    $(this).parent().find(PriceTable.instance._selectors.accessoriesCustomQuantity).val(quantity);
                    PriceTable.instance.accessories[randomId] = PriceTable.instance.products[randomId];
                    var qty = parseInt($('#product #quantity_wanted').val());
                    var idGroup = $(this).data('idgroup');
                    if ($('#product' + ' ' + selector.groupAccessories + ' ' + selector.accessoriesCustomQuantity).length > 0) {
                        qty = $('#quantity_' + idGroup).val();
                    }
                    if (qty >= 0) {
                        PriceTable.instance.products[randomId]['qty'] = qty;
                    }

                    $('#quantity_' + idGroup).val(PriceTable.instance.products[randomId]['qty']);
                    $('#quantity_' + idGroup).data('custom-quantity', PriceTable.instance.products[randomId]['qty']);
                }
            });
        }

        if ($(selector.groupAccessories).find('select').hasClass(this._selectors.classNameAccessoriesGroup))
        {
            $(PriceTable.instance._selectors.accessoriesGroup).each(function ()
            {
                var randomId = $(this).find(':selected').data('randomid');
                if (typeof PriceTable.instance.products[randomId] !== 'undefined')
                {
                    var quantity = PriceTable.instance.products[randomId].custom_quantity ? PriceTable.instance.products[randomId].custom_quantity : PriceTable.instance.products[randomId].default_quantity;
                    $(this).prev().val(quantity);
                    PriceTable.instance.accessories[randomId] = PriceTable.instance.products[randomId];
                    var qty = parseInt($('#product #quantity_wanted').val());

                    if ($('#product' + ' ' + selector.groupAccessories + ' ' + selector.accessoriesCustomQuantity).length > 0) {
                        qty = parseInt($('#quantity_' + $(this).attr('name').replace('accessory_', '')).val());
                    }
                    if (qty >= 0) {
                        PriceTable.instance.products[randomId]['qty'] = qty;
                    }

                    $('#quantity_' + $(this).attr('name').replace('accessory_', '')).data('custom-quantity', PriceTable.instance.products[randomId]['qty']);
                    $('#quantity_' + $(this).attr('name').replace('accessory_', '')).val(PriceTable.instance.products[randomId]['qty']);
                    if (!PriceTable.instance.showOptionImage && Object.size(PriceTable.instance.products[randomId]['combinations']) > 1)
                        PriceTable.instance._renderCombination(randomId, false);
                }

            });
        }
        if ($(selector.groupAccessories).find('input').hasClass(this._selectors.classNameAccessoryItem))
        {
            $(PriceTable.instance._selectors.accessoryItem + ':checked').each(function (i)
            {
                var randomId = $(this).data('randomid');
                var qty = parseInt($('#product #quantity_wanted').val());
                if (typeof PriceTable.instance.products[randomId] !== 'undefined')
                {
                    PriceTable.instance.accessories[randomId] = PriceTable.instance.products[randomId];
                    if ($('#product' + ' ' + selector.groupAccessories + ' ' + selector.accessoriesCustomQuantity).length > 0)
                        qty = parseInt($('#quantity_' + $(this).attr('id').replace('accessories_proudct_', '')).val());

                    if (qty >= 0)
                        PriceTable.instance.products[randomId]['qty'] = qty;

                    $('#quantity_' + $(this).attr('id').replace('accessories_proudct_', '')).val(PriceTable.instance.products[randomId]['qty']);
                }
            });
        }

        this.accessories[PriceTable.instance.randomMainProductId] = PriceTable.instance.products[PriceTable.instance.randomMainProductId];

    };

    /**
     * update main product price when change combination
     */
    this._updateMainProductPrice = function ()
    {
        var qty = $('#product #quantity_wanted').val();
        if (typeof qty !== 'undefined')
        {
            if (PriceTable.instance.isIntegerNumber(qty) && parseInt(qty) >= 0)
                PriceTable.instance.products[PriceTable.instance.randomMainProductId]['qty'] = parseInt(qty);
        }
    };
    /**
     * render price table
     */
    this._renderTablePrice = function (forceToChangeMainPrice)
    {
        PriceTable.instance._insertAccessoriesToButtonForm();
        if (typeof forceToChangeMainPrice === 'undefined')
            forceToChangeMainPrice = false;

        if ($.isEmptyObject(this.accessories))
            return;
        var priceTable = '';
        var underline = '';
        var totalPrice = 0;
        $.each(this.accessories, function (randomid, product)
        {
            var productPrice = 0;
            var combinationName = '';
            $.each(product.combinations, function (idProductAttribute, combination) {
                if (typeof combination !== 'undefined' && (parseInt(product.default_id_product_attribute) === parseInt(idProductAttribute) || idProductAttribute == 0)) {
                    productPrice = product.qty * combination.price;
                    combinationName = combination.name;
                }
                if (!$.isEmptyObject(combination.specific_prices))
                {
                    $.each(combination.specific_prices, function (fromQty, specificPrice) {
                        if (product.qty >= fromQty)
                            productPrice = product.qty * specificPrice;
                    });
                }
                if (combination.is_cart_rule && (parseInt(product.default_id_product_attribute) === parseInt(idProductAttribute) || idProductAttribute == 0)) {
                    productPrice = product.qty * combination.final_price;
                }
            });
            var outOfStockWarningIcon = PriceTable.instance._renderOutOfStockWarningIcon(product);
            underline = randomid === PriceTable.instance.randomMainProductId ? 'style="text-decoration: underline;"' : '';
            totalPrice += productPrice;
            var blockCombinationName = (combinationName && PriceTable.instance.showCombination) ? '<span class="ma_accessory_combination_name" title="' + combinationName + '">' + combinationName + '</span>' : '';
            priceTable = priceTable + '<tr>' +
                    '<td class="left-column" ' + underline + '><span class="ma_accessory_name" title="' + product.name + '">' + product.qty + ' x ' + product.name + ':</span>' + blockCombinationName + '</td>' +
                    '<td class="right-column">' + PriceTable.instance._hsmaFormatCurrency(productPrice) + outOfStockWarningIcon + '</td>' +
                    '</tr>';
        });


        var totals = totalPrice;
        priceTable = priceTable + '<tr>' +
                '<td class="left-column-total">' + this.subTotal + ':</td>' +
                '<td class="right-column-total">' + PriceTable.instance._hsmaFormatCurrency(totals) + '</td>' +
                '</tr>';

        if (parseInt(this.showTablePrice) === 1)
            $(this._selectors.accessoriesTablePriceContent).html(priceTable);

        if (this.changeMainPrice) {
            $(this._selectors.mainProductPrice).html(totals);
            $('.current-price span').html(PriceTable.instance._hsmaFormatCurrency(totals));
        }
    };

    this._hsmaFormatCurrency = function (price) {
        var currencyFormat = hsmaFormatCurrency;
        var currencySign = prestashop.currency.sign;
        var currencyBlank = 1;
        var priceDisplayPrecision = hsmaPriceDisplayPrecision;
        var blank = '';
        price = parseFloat(price.toFixed(10));
        price = PriceTable.instance._hsmaRound(price, priceDisplayPrecision);
        if (currencyBlank > 0)
            blank = ' ';

        if (currencyFormat == 1)
            return currencySign + blank + PriceTable.instance._hsmaFormatNumber(price, priceDisplayPrecision, ',', '.');
        if (currencyFormat == 2)
            return (PriceTable.instance._hsmaFormatNumber(price, priceDisplayPrecision, ' ', ',') + blank + currencySign);
        if (currencyFormat == 3)
            return (currencySign + blank + PriceTable.instance._hsmaFormatNumber(price, priceDisplayPrecision, '.', ','));
        if (currencyFormat == 4)
            return (PriceTable.instance._hsmaFormatNumber(price, priceDisplayPrecision, ',', '.') + blank + currencySign);
        if (currencyFormat == 5)
            return (currencySign + blank + PriceTable.instance._hsmaFormatNumber(price, priceDisplayPrecision, '\'', '.'));
        return price;
    }

    this._hsmaFormatNumber = function (value, numberOfDecimal, thousenSeparator, virgule)
    {
        value = value.toFixed(numberOfDecimal);
        var val_string = value + '';
        var tmp = val_string.split('.');
        var abs_val_string = (tmp.length === 2) ? tmp[0] : val_string;
        var deci_string = ('0.' + (tmp.length === 2 ? tmp[1] : 0)).substr(2);
        var nb = abs_val_string.length;

        for (var i = 1; i < 4; i++)
            if (value >= Math.pow(10, (3 * i)))
                abs_val_string = abs_val_string.substring(0, nb - (3 * i)) + thousenSeparator + abs_val_string.substring(nb - (3 * i));

        if (parseInt(numberOfDecimal) === 0)
            return abs_val_string;
        return abs_val_string + virgule + (deci_string > 0 ? deci_string : '00');
    }
    this._hsmaRound = function (value, places)
    {
        if (typeof (roundMode) === 'undefined')
            roundMode = 2;
        if (typeof (places) === 'undefined')
            places = 2;

        var method = roundMode;

        if (method === 0)
            return ceilf(value, places);
        else if (method === 1)
            return floorf(value, places);
        else if (method === 2)
            return PriceTable.instance._hsmaRoundHalfUp(value, places);
        else if (method == 3 || method == 4 || method == 5)
        {
            // From PHP Math.c
            var precision_places = 14 - Math.floor(ps_log10(Math.abs(value)));
            var f1 = Math.pow(10, Math.abs(places));

            if (precision_places > places && precision_places - places < 15)
            {
                var f2 = Math.pow(10, Math.abs(precision_places));
                if (precision_places >= 0)
                    tmp_value = value * f2;
                else
                    tmp_value = value / f2;

                tmp_value = PriceTable.instance._hsmaRoundHelper(tmp_value, roundMode);

                /* now correctly move the decimal point */
                f2 = Math.pow(10, Math.abs(places - precision_places));
                /* because places < precision_places */
                tmp_value /= f2;
            } else
            {
                /* adjust the value */
                if (places >= 0)
                    tmp_value = value * f1;
                else
                    tmp_value = value / f1;

                if (Math.abs(tmp_value) >= 1e15)
                    return value;
            }

            tmp_value = PriceTable.instance._hsmaRoundHelper(tmp_value, roundMode);
            if (places > 0)
                tmp_value = tmp_value / f1;
            else
                tmp_value = tmp_value * f1;

            return tmp_value;
        }
    }
    this._hsmaRoundHalfUp = function (value, precision)
    {
        var mul = Math.pow(10, precision);
        var val = value * mul;

        var next_digit = Math.floor(val * 10) - 10 * Math.floor(val);
        if (next_digit >= 5)
            val = Math.ceil(val);
        else
            val = Math.floor(val);

        return val / mul;
    }
    this._hsmaRoundHelper = function (value, mode)
    {
        // From PHP Math.c
        if (value >= 0.0)
        {
            tmp_value = Math.floor(value + 0.5);
            if ((mode == 3 && value == (-0.5 + tmp_value)) ||
                    (mode == 4 && value == (0.5 + 2 * Math.floor(tmp_value / 2.0))) ||
                    (mode == 5 && value == (0.5 + 2 * Math.floor(tmp_value / 2.0) - 1.0)))
                tmp_value -= 1.0;
        } else
        {
            tmp_value = Math.ceil(value - 0.5);
            if ((mode == 3 && value == (0.5 + tmp_value)) ||
                    (mode == 4 && value == (-0.5 + 2 * Math.ceil(tmp_value / 2.0))) ||
                    (mode == 5 && value == (-0.5 + 2 * Math.ceil(tmp_value / 2.0) + 1.0)))
                tmp_value += 1.0;
        }

        return tmp_value;
    }


    /**
     * Render out of stock warning icon
     * @param {object} product
     * @returns {string}
     */
    this._renderOutOfStockWarningIcon = function(product)
    {
        var outOfStockWarningIcon = '<span title="'+ product.available_later +'" class="warning_out_of_stock"></span>';
        var idProductAttribute = product.default_id_product_attribute;
        return (typeof product.combinations[idProductAttribute].is_available_when_out_of_stock !== 'undefined' && product.combinations[idProductAttribute].is_available_when_out_of_stock && isShowIconOutOfStock)? outOfStockWarningIcon : '';
    };

    /**
     * Render list combinations of products
     */
    this._renderCombinations = function ()
    {
        if ($(this._selectors.groupAccessories).find('select').hasClass(this._selectors.classNameAccessoriesGroup))
        {
            if (this.showOptionImage)
            {
                this._renderProductOptionImage();
            }
            $(PriceTable.instance._selectors.accessoriesGroup).each(function ()
            {
                var randomId = $(this).val();
                if (typeof PriceTable.instance.products[randomId] !== 'undefined' && Object.size(PriceTable.instance.products[randomId]['combinations']) > 1)
                    PriceTable.instance._renderCombination(randomId, false);
            });

        }
        if ($(this._selectors.groupAccessories).find('input').hasClass(this._selectors.classNameAccessoryItem))
        {
            $.each(this.products, function (randomId, product) {
                if (Object.keys(product.combinations).length > 1)
                    PriceTable.instance._renderCombination(randomId, true);
            });
        }

    };

    /**
     * Render combination of one product
     * @param {string} randomId
     * @param {boolean} checkbox
     */
    this._renderCombination = function (randomId, checkbox)
    {
        if (typeof randomId === 'undefined')
            return;
        var product = this.products[randomId];
        var hasCombination = true;
        var html = '<select data-randomid="' + randomId + '" name="id_product_attribute" class="product-combination">';
        var i = 0;
        var defaultSelectedIndex = 0;
        $.each(product.combinations, function (idProductAttribute, combination) {
            var dataImg = '';
            if (!checkbox)
                dataImg = 'data-imagesrc="' + combination.image_default + '"';
            var dataAllowOrderingWhenOutOfStock = 'data-alloworderingwhenoutofstock="'+ combination.is_available_when_out_of_stock +'"';
            var dataStockAvailable = 'data-stockavailable="'+combination.is_stock_available+'"';
            var selected = '';
            if (parseInt(idProductAttribute) === parseInt(product.default_id_product_attribute))
            {
                defaultSelectedIndex = i;
                selected = 'selected="selected"';
            }
            html += '<option ' + dataImg + ' ' + dataStockAvailable + ' '+ dataAllowOrderingWhenOutOfStock +' value="' + idProductAttribute + '"' + selected + '>' + combination.name + '</option>';
            if (idProductAttribute === 0)
                hasCombination = false;
            i++;
        });

        html += '</select>';
        var classContainCombination = 'combination_' + product.id_accessory_group + '_' + product.id_accessory;
        if (checkbox && hasCombination)
            $('.' + classContainCombination).html(html);
        else
        {
            var selector = 'combination_' + product.id_accessory_group;
            $('#' + selector).html('');
            if (hasCombination)
            {
                if (this.showOptionImage)
                    $('#' + selector).ddslick('destroy');
                $('#' + selector).html(html);
                if (this.showOptionImage)
                    PriceTable.instance._renderCombinationOptionImage(selector, product, defaultSelectedIndex, randomId);

            } else
            {
                //product don't have combination use product's image
                $('.accessory_image_' + product.id_accessory_group).html('<img src="' + product.combinations[0].image_default + '">');
                $('.accessory_image_' + product.id_accessory_group).attr('href', product.combinations[0].image_fancybox);
            }
        }

    };

    /**
     * 
     * Render list of product with image beside inside select option list. 
     */
    this._renderProductOptionImage = function () {
        $('.' + PriceTable.instance._selectors.classProductDDSlick).each(function () {
            var idDDSlick = $(this).attr('id');
            $('#' + idDDSlick).ddslick({
                showSelectedHTML: false,
                background: '#fff',
                onSelected: function (data) {
                    var idGroup = $('#' + idDDSlick).parent().data('idgroup');
                    var randomId = data.selectedData.description;
                    // in case don't select any product then remove combination list
                    if (data.selectedData.value == 0)
                    {
                        var selector = 'combination_' + idGroup;
                        $('#' + selector).html('');
                        // remove image
                        $('.accessory_image_' + idGroup).html('');
                        $('#randomid-group-' + idGroup).data('randomid', 0);
                    } else {
                        $('#randomid-group-' + idGroup).data('randomid', randomId);
                    }
                    PriceTable.instance._initProductAccessories();
                    PriceTable.instance._renderTablePrice();
                    PriceTable.instance._renderCombination(randomId, false);
                    PriceTable.instance.scrollToTablePrice();
                }
            });
        });
    };

    /**
     * @param {selector} selector
     * @param {product} product
     * @param {defaultSelectedIndex} defaultSelectedIndex
     * @param {randomId} randomId
     * Render list of combination with image beside inside select option list. 
     */
    this._renderCombinationOptionImage = function (selector, product, defaultSelectedIndex, randomId) {
        var previousValueOfCombination = product.default_id_product_attribute;
        $('#' + selector).ddslick({
            showSelectedHTML: false,
            background: '#fff',
            defaultSelectedIndex: defaultSelectedIndex,
            onSelected: function (data) {
                var idGroup = product.id_accessory_group;
                var idProductAttribute = data.selectedData.value;
                customQuantity = $('#' + selector).parent().find(PriceTable.instance._selectors.accessoriesCustomQuantity).val();
                customQuantity = typeof customQuantity !== 'undefined' ? customQuantity : PriceTable.instance.products[randomId]['qty'];
                if (!PriceTable.instance.products[randomId]['combinations'][idProductAttribute]['out_of_stock'] && PriceTable.instance.products[randomId]['combinations'][idProductAttribute]['avaiable_quantity'] < customQuantity)
                {
                    var i = 0;
                    $.each(product.combinations, function (idProductAttribute, combination) {
                        if (idProductAttribute == previousValueOfCombination)
                            $('#' + selector).ddslick('select', {index: i});
                        i++;
                    });
                    alert(PriceTable.instance.warningOutOfStock);
                    window.getSelection().removeAllRanges();
                    return;
                } else
                {
                    previousValueOfCombination = idProductAttribute;
                    var selectedCombination = product.combinations[idProductAttribute];
                    if (selectedCombination.image_default != '')
                    {
                        $('.accessory_image_' + idGroup).html('<img src="' + selectedCombination.image_default + '">');
                    }
                    if (selectedCombination.image_fancybox != '')
                    {
                        $('.accessory_image_' + idGroup).attr('href', selectedCombination.image_fancybox);
                    }
                    PriceTable.instance.products[randomId].default_id_product_attribute = idProductAttribute;
                    PriceTable.instance.triggerTablePrice();
                    PriceTable.instance._updateAccessoryPrice(PriceTable.instance.products[randomId]);
                }
                PriceTable.instance.scrollToTablePrice();
            }
        });
    };

    /**
     * Update price of product accessory
     * @param {object} product
     */
    this._updateAccessoryPrice = function (product)
    {
        var price = product.combinations[product.default_id_product_attribute].price;
        var final_price = product.combinations[product.default_id_product_attribute].final_price;
        var is_cart_rule = product.combinations[product.default_id_product_attribute].is_cart_rule;
        if (price > 0)
        {
            var classContainPrice = 'price_' + product.id_accessory_group + '_' + product.id_accessory;
            $('.' + classContainPrice).html(PriceTable.instance._hsmaFormatCurrency(price));
        }
        if (is_cart_rule) {
            var classContainFinalPrice = 'final_price_' + product.id_accessory_group + '_' + product.id_accessory;
            $('.' + classContainFinalPrice).html(PriceTable.instance._hsmaFormatCurrency(final_price));
        }
    };

    /**
     * Update image of product when change combination
     * @param {Jquery} element
     * @param {Object} product
     */
    this._updateProductCombinationImage = function (element, product)
    {
        var selectedCombination = product.combinations[product.default_id_product_attribute];
        $(element).find('.accessory_img_link').attr('src', selectedCombination.image_fancybox);
        $(element).find('.accessory_image').attr('src', selectedCombination.image_default);

    };

    /**
     * Check stock available of accessory when customer change quantity at front end
     * @param {string} randomId
     * @param {int} newQuantity
     * @param {int} idCombination
     * @returns {Boolean}
     */
    this.isStockAvailable = function (randomId, newQuantity, idCombination)
    {
        var flag = true;
        idCombination = typeof idCombination !== 'undefined' ? idCombination : 0;
        var product = this.products[randomId].combinations[idCombination];
        var availableQuantity = product.avaiable_quantity;
        var outOfStock = product.out_of_stock;
        if (!outOfStock && availableQuantity < newQuantity)
            flag = false;
        return flag;
    };

    /**
     * Check if button add to cart is visible or not
     * @returns boolean
     */
    this.isAddToCartButtonVisible = function () {
        return $(PriceTable.instance._selectors.idAddToCartButton).visible();
    };

    /**
     * Scroll to table price if add to cart button is not visible 
     * (the heigh of accessories too big)
     * 
     */
    this.scrollToTablePrice = function () {
        if (!PriceTable.instance.isAddToCartButtonVisible())
        {
            if (parseInt(this.showTablePrice) === 1) {
                $('html, body').animate({
                    scrollTop: $(PriceTable.instance._selectors.accessoriesTablePriceContent).offset().top - 100
                }, 500);
            }

        }
    };

    /**
     * Trigger events of table price
     */
    this.triggerTablePrice = function () {
        PriceTable.instance._updateMainProductPrice();
        PriceTable.instance._initProductAccessories();
        PriceTable.instance._renderTablePrice();
    };

    /**
     * Display or hide block contain group accessories
     * @param {Object} element
     */
    this._onClickBlockGroup = function (element)
    {

        if ($(element).hasClass('add')) {
            $(element).html('');
            $(element).html('&#xE15B;');
            $(element).removeClass('add');
            $(element).addClass('remove');
        } else {
            $(element).html('');
            $(element).html('&#xE145;');
            $(element).removeClass('remove');
            $(element).addClass('add');
        }
        $(element).parents(PriceTable.instance._selectors.accessoryGroup).find('.' + PriceTable.instance._selectors.contentGroup).toggle("slow");
    };
    this._onClickExpandGroup = function (element)
    {

        if ($(element).parents(PriceTable.instance._selectors.accessoryGroup).find('i').hasClass(PriceTable.instance._selectors.iconCollapse)) {
            $(element).parents(PriceTable.instance._selectors.accessoryGroup).find('i').removeClass(PriceTable.instance._selectors.iconCollapse);
            $(element).parents(PriceTable.instance._selectors.accessoryGroup).find('i').addClass(PriceTable.instance._selectors.iconExpand);
            $(element).parents(PriceTable.instance._selectors.accessoryGroup).find('.' + PriceTable.instance._selectors.contentGroup).toggle("slow");
        }
    }
    this._insertAccessoriesToButtonForm = function ()
    {
        var isEnoughtAccessory = true;
        var groupAccessories = $('#group_accessories').find('select');
        var idAccesories = [];
        var idAccesoriesAttributes = [];
        var customQties = [];
        // in case option image for dropdown is enable    
        if ($('#group_accessories').find('div').hasClass('dd-container'))
        {
            if ($('#group_accessories').find('.dd-selected-value'))
            {
                $('#group_accessories input.dd-selected-value').each(function () {
                    // only get attribute id value, not id product
                    var idSelectedElement = $(this).parent().parent().attr('id');
                    var idAccesoryAttributes = $(this).val();
                    if (idSelectedElement.indexOf('accessories_group') >= 0)
                    {
                        if (idAccesoryAttributes > 0)
                        {
                            idAccesories.push(parseInt(idAccesoryAttributes));
                            var divCombination = $(this).parent().parent().next();
                            var idAccesoryAttribute = 0;
                            if ($(divCombination).find('input').hasClass('dd-selected-value')) {
                                idAccesoryAttribute = $(divCombination).find('.dd-selected-value').val();
                            }
                            idAccesoriesAttributes.push(parseInt(idAccesoryAttribute));
                            if (idAccesoryAttributes > 0 && $('#' + idSelectedElement).parent().find('input').hasClass('custom_quantity')) {
                                customQty = parseInt($('#' + idSelectedElement).parent().find('.custom_quantity').val());
                                if (customQty > 0) {
                                    customQties.push(customQty);
                                } else {
                                    idAccesoriesAttributes.pop();
                                    idAccesories.pop();
                                }
                            }
                        }
                    }
                });
            }
        }
        if (groupAccessories.hasClass('accessories_group'))
        {
            $('.accessories_group option:selected').each(function (i) {
                if (parseInt($(this).val()) > 0)
                {
                    var parentElement = $(this).parents('.option-row');
                    idAccesories.push(parseInt($(this).val()));
                    if ($(parentElement).find('select').hasClass('product-combination'))
                        idAccesoriesAttributes.push(parseInt($(parentElement).find('.product-combination').val()));
                    else
                        idAccesoriesAttributes.push(parseInt($(this).data('id-product-attribute')));

                    if ($(parentElement).find('input').hasClass('custom_quantity')) {
                        customQty = parseInt($(parentElement).find('.custom_quantity').val());
                        if (customQty > 0) {
                            customQties.push(customQty);
                        } else {
                            idAccesoriesAttributes.pop();
                            idAccesories.pop();
                        }
                    }

                }
            });
        }
        if ($('#group_accessories').find('input').hasClass('accessory_item'))
        {

            $('#group_accessories .accessory_item' + ':checked').each(function (i)
            {
                var idItem = parseInt($(this).val());
                if (idItem > 0) {
                    idAccesories.push(idItem);
                    var parentElement = $(this).parents('tr');

                    if ($(parentElement).find('select').hasClass('product-combination'))
                        idAccesoriesAttributes.push(parseInt($(parentElement).find('.product-combination').val()));
                    else
                        idAccesoriesAttributes.push(parseInt($(this).data('id-product-attribute')));

                    if ($(parentElement).find('input').hasClass('custom_quantity')) {
                        customQty = parseInt($(parentElement).find('.custom_quantity').val());
                        if (customQty > 0) {
                            customQties.push(customQty);
                        } else {
                            idAccesoriesAttributes.pop();
                            idAccesories.pop();
                        }
                    }

                }

            });

            if (parseInt(window.buyTogetherOption) === parseInt(adminProductSetting.BUY_TOGETHER_YES))
            {
                $('#group_accessories .accessorygroup').each(function () {
                    var numberCheckedAccessory = $(this).find('.accessory_item' + ':checked').length;
                    if (!numberCheckedAccessory)
                        isEnoughtAccessory = false;
                });
            }

        }
        if (idAccesories.length > 0)
            idAccesories = idAccesories.join(",");
        if (idAccesoriesAttributes.length > 0)
            idAccesoriesAttributes = idAccesoriesAttributes.join(",");
        if (customQties.length > 0)
            customQties = customQties.join(",");

        if (!isEnoughtAccessory)
        {
            $('#group_accessories .accessorygroup').each(function () {
                if (!$(this).find('.accessory_item' + ':checked').length) {
                    priceTable._onClickExpandGroup(this);
                    if (($(this).parent().find('.message_error')).length == 0) {
                        $('<span class="message_error">' + alertMessage + '</span>').insertBefore($(this));
                    }
                }
            });
            if ($('.message_error').length) {
                $('html, body').animate({
                    scrollTop: $('.message_error').offset().top - 100
                }, 500);
            }
            $(PriceTable.instance._selectors.idAddToCartButton).prop('disabled', 'disabled');
            return false;
        } else {
            $(PriceTable.instance._selectors.idAddToCartButton).prop('disabled', '');
        }

        $('#add-to-cart-or-refresh').find('.hsma_render_input').remove();
        var inputIdAccessories = '<input class="hsma_render_input" type="hidden" name="id_accessories" value="' + idAccesories + '"/>';
        var inputIdAccesoriesAttributes = '<input class="hsma_render_input" type="hidden" name="id_accesories_attributes" value="' + idAccesoriesAttributes + '"/>';
        var inputCustomQties = '<input class="hsma_render_input" type="hidden" name="custom_qty" value="' + customQties + '"/>';

        $(inputIdAccessories).insertAfter('#product_page_product_id');
        $(inputIdAccesoriesAttributes).insertAfter('#product_page_product_id');
        $(inputCustomQties).insertAfter('#product_page_product_id');

    }
};

Object.size = function (obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key))
            size++;
    }
    return size;
};

//format_string.js
String.prototype.format = function () {
    var formatted = this;
    for (var i = 0; i < arguments.length; i++) {
        var regexp = new RegExp('\\{' + i + '\\}', 'gi');
        formatted = formatted.replace(regexp, arguments[i]);
    }
    return formatted;
};
//multi_accessories.js
$(document).ready(function () {
    $(document).on('click', '.order .accessorygroup a.ma_accessory_name', clickAccessoryNameHandler);
});

/**
 * 
 * Get sizes of hidden element
 * http://stackoverflow.com/questions/2345784/jquery-get-height-of-hidden-element-in-jquery/8839261#8839261
 */
$.fn.getSize = function () {
    var $wrap = $("<div />").appendTo($("body"));
    $wrap.css({
        "position": "absolute !important",
        "visibility": "hidden !important",
        "display": "block !important"
    });

    $clone = $(this).clone().appendTo($wrap);

    sizes = {
        "width": this.width(),
        "height": this.height()
    };

    $wrap.remove();

    return sizes;
};

/**
 * In this callback, we will do:<br/>
 * - Set up a simpleModal box
 * - Turn on the simpleMoal box
 * @param {Event} event
 */
function clickAccessoryNameHandler(event) {
    event.preventDefault();
    var contentSizes = $(this).parent().find('.tooltipster-content').getSize();
    var contentH = contentSizes.height > $(window).height() ? '100%' : contentSizes.height;

    $(this).parent().find('.tooltipster-content').modal({
        escClose: true,
        overlayClose: true,
        containerCss: {
            'width': '600px',
            'height': contentH,
            'minHeight': '200px',
            'text-align': 'left'
        }
    });
}
//jquery.ddslick.js
(function ($) {

    $.fn.ddslick = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exists.');
        }
    };

    var methods = {},
            //Set defauls for the control
            defaults = {
                data: [],
                keepJSONItemsOnTop: false,
                width: 260,
                height: null,
                background: "#eee",
                selectText: "",
                defaultSelectedIndex: null,
                truncateDescription: true,
                imagePosition: "left",
                showSelectedHTML: true,
                clickOffToClose: true,
                onSelected: function () { }
            },
            ddSelectHtml = '<div class="dd-select"><input class="dd-selected-value" type="hidden" /><a class="dd-selected"></a><span class="dd-pointer dd-pointer-down"></span></div>',
            ddOptionsHtml = '<ul class="dd-options"></ul>',
            //CSS for ddSlick
            ddslickCSS = '<style id="css-ddslick" type="text/css">' +
            '.dd-select{ border-radius:2px; border:solid 1px #ccc; position:relative; cursor:pointer;}' +
            '.dd-desc { color:#aaa; display:block; overflow: hidden; font-weight:normal; line-height: 1.4em; }' +
            '.dd-selected{ overflow:hidden; display:block; padding:10px; font-weight:bold;}' +
            '.dd-pointer{ width:0; height:0; position:absolute; right:10px; top:50%; margin-top:-3px;}' +
            '.dd-pointer-down{ border:solid 5px transparent; border-top:solid 5px #000; }' +
            '.dd-pointer-up{border:solid 5px transparent !important; border-bottom:solid 5px #000 !important; margin-top:-8px;}' +
            '.dd-options{ border:solid 1px #ccc; border-top:none; list-style:none; box-shadow:0px 1px 5px #ddd; display:none; position:absolute; z-index:2000; margin:0; padding:0;background:#fff; overflow:auto;}' +
            '.dd-option{ padding:10px; display:block; border-bottom:solid 1px #ddd; overflow:hidden; text-decoration:none; color:#333; cursor:pointer;-webkit-transition: all 0.25s ease-in-out; -moz-transition: all 0.25s ease-in-out;-o-transition: all 0.25s ease-in-out;-ms-transition: all 0.25s ease-in-out; }' +
            '.dd-options > li:last-child > .dd-option{ border-bottom:none;}' +
            '.dd-option:hover{ background:#f3f3f3; color:#000;}' +
            '.dd-selected-description-truncated { text-overflow: ellipsis; white-space:nowrap; }' +
            '.dd-option-selected { background:#f6f6f6; }' +
            '.dd-option-image, .dd-selected-image { vertical-align:middle; float:left; margin-right:5px; max-width:64px;}' +
            '.dd-image-right { float:right; margin-right:15px; margin-left:5px;}' +
            '.dd-container{ position:relative;}​ .dd-selected-text { font-weight:bold}​</style>';

    //CSS styles are only added once.
    if ($('#css-ddslick').length <= 0) {
        $(ddslickCSS).appendTo('head');
    }

    //Public methods 
    methods.init = function (options) {
        //Preserve the original defaults by passing an empty object as the target
        var options = $.extend({}, defaults, options);

        //Apply on all selected elements
        return this.each(function () {
            var obj = $(this),
                    data = obj.data('ddslick');
            //If the plugin has not been initialized yet
            if (!data) {

                var ddSelect = [], ddJson = options.data;

                //Get data from HTML select options
                obj.find('option').each(function () {
                    var $this = $(this), thisData = $this.data();

                    ddSelect.push({
                        text: $.trim($this.text()),
                        value: $this.val(),
                        selected: $this.is(':selected'),
                        description: thisData.description,
                        stockAvailable: thisData.stockavailable,
                        allowOrderingWhenOutOfStock: thisData.alloworderingwhenoutofstock,
                        imageSrc: thisData.imagesrc //keep it lowercase for HTML5 data-attributes
                    });
                });

                //Update Plugin data merging both HTML select data and JSON data for the dropdown
                if (options.keepJSONItemsOnTop)
                    $.merge(options.data, ddSelect);
                else
                    options.data = $.merge(ddSelect, options.data);

                //Replace HTML select with empty placeholder, keep the original
                var original = obj, placeholder = $('<div id="' + obj.attr('id') + '"></div>');
                obj.replaceWith(placeholder);
                obj = placeholder;

                //Add classes and append ddSelectHtml & ddOptionsHtml to the container
                obj.addClass('dd-container').append(ddSelectHtml).append(ddOptionsHtml);

                //Get newly created ddOptions and ddSelect to manipulate
                var ddSelect = obj.find('.dd-select'),
                        ddOptions = obj.find('.dd-options');

                //Set widths
                ddOptions.css({width: options.width});
                ddSelect.css({width: options.width, background: options.background});
                obj.css({width: options.width});

                //Set height
                if (options.height != null)
                    ddOptions.css({height: options.height, overflow: 'auto'});

                //Add ddOptions to the container. Replace with template engine later.
                $.each(options.data, function (index, item) {
                    if (item.selected)
                        options.defaultSelectedIndex = index;
                    ddOptions.append('<li>' +
                            '<a class="dd-option">' +
                            (item.value ? ' <input class="dd-option-value" type="hidden" value="' + item.value + '" />' : '') +
                            (item.imageSrc ? ' <img class="dd-option-image' + (options.imagePosition == "right" ? ' dd-image-right' : '') + '" src="' + item.imageSrc + '" />' : '') +
                            (item.text ? formatedTextItem(item.text) : '') +
                            ((typeof item.stockAvailable !== 'undefined' && isShowIconOutOfStock) ? item.stockAvailable ? '' : '<span class="forbidden_ordering" title="' + messageOutOfStock + '"></span>' : '')+
                            ((typeof item.allowOrderingWhenOutOfStock !== 'undefined' && isShowIconOutOfStock) ? item.allowOrderingWhenOutOfStock ? '<span class="warning_out_of_stock" title="'+ msgAvailableLater +'"></span>' : '' : '')+
                            (item.description ? ' <small class="dd-option-description dd-desc">' + item.description + '</small>' : '') +
                            '</a>' +
                            '</li>');
                });

                //Save plugin data.
                var pluginData = {
                    settings: options,
                    original: original,
                    selectedIndex: -1,
                    selectedItem: null,
                    selectedData: null
                }
                obj.data('ddslick', pluginData);

                //Check if needs to show the select text, otherwise show selected or default selection
                if (options.selectText.length > 0 && options.defaultSelectedIndex == null) {
                    obj.find('.dd-selected').html(options.selectText);
                } else {
                    var index = (options.defaultSelectedIndex != null && options.defaultSelectedIndex >= 0 && options.defaultSelectedIndex < options.data.length)
                            ? options.defaultSelectedIndex
                            : 0;
                    selectIndex(obj, index);
                }

                //EVENTS
                //Displaying options
                obj.find('.dd-select').on('click.ddslick', function () {
                    open(obj);
                });

                //Selecting an option
                obj.find('.dd-option').on('click.ddslick', function () {
                    if ($(this).parent().find('span').hasClass('forbidden_ordering')){
                        return;
                    }
                    selectIndex(obj, $(this).closest('li').index());
                });

                //Click anywhere to close
                if (options.clickOffToClose) {
                    ddOptions.addClass('dd-click-off-close');
                    obj.on('click.ddslick', function (e) {
                        e.stopPropagation();
                    });
                    $('body').on('click', function () {
                        $('.dd-click-off-close').slideUp(50).siblings('.dd-select').find('.dd-pointer').removeClass('dd-pointer-up');
                    });
                }
            }
        });
    };

    //Public method to select an option by its index
    methods.select = function (options) {
        return this.each(function () {
            if (options.index)
                selectIndex($(this), options.index);
        });
    }

    //Public method to open drop down
    methods.open = function () {
        return this.each(function () {
            var $this = $(this),
                    pluginData = $this.data('ddslick');

            //Check if plugin is initialized
            if (pluginData)
                open($this);
        });
    };

    //Public method to close drop down
    methods.close = function () {
        return this.each(function () {
            var $this = $(this),
                    pluginData = $this.data('ddslick');

            //Check if plugin is initialized
            if (pluginData)
                close($this);
        });
    };

    //Public method to destroy. Unbind all events and restore the original Html select/options
    methods.destroy = function () {
        return this.each(function () {
            var $this = $(this),
                    pluginData = $this.data('ddslick');

            //Check if already destroyed
            if (pluginData) {
                var originalElement = pluginData.original;
                $this.removeData('ddslick').unbind('.ddslick').replaceWith(originalElement);
            }
        });
    }

    //Private: Select index
    function selectIndex(obj, index) {

        //Get plugin data
        var pluginData = obj.data('ddslick');

        //Get required elements
        var ddSelected = obj.find('.dd-selected'),
                ddSelectedValue = ddSelected.siblings('.dd-selected-value'),
                ddOptions = obj.find('.dd-options'),
                ddPointer = ddSelected.siblings('.dd-pointer'),
                selectedOption = obj.find('.dd-option').eq(index),
                selectedLiItem = selectedOption.closest('li'),
                settings = pluginData.settings,
                selectedData = pluginData.settings.data[index];

        //Highlight selected option
        obj.find('.dd-option').removeClass('dd-option-selected');
        selectedOption.addClass('dd-option-selected');

        //Update or Set plugin data with new selection
        pluginData.selectedIndex = index;
        pluginData.selectedItem = selectedLiItem;
        pluginData.selectedData = selectedData;

        //If set to display to full html, add html
        if (settings.showSelectedHTML) {
            ddSelected.html(
                    (selectedData.imageSrc ? '<img class="dd-selected-image' + (settings.imagePosition == "right" ? ' dd-image-right' : '') + '" src="' + selectedData.imageSrc + '" />' : '') +
                    (selectedData.text ? '<label class="dd-selected-text">' + selectedData.text + '</label>' : '') +
                    ((typeof selectedData.stockAvailable !== 'undefined' && isShowIconOutOfStock) ? selectedData.stockAvailable ? '<span class="forbidden_ordering" title="'+ messageOutOfStock +'"></span>' : '' : '')+
                    ((typeof selectedData.allowOrderingWhenOutOfStock !== 'undefined' && isShowIconOutOfStock) ? selectedData.allowOrderingWhenOutOfStock ? '<span class="warning_out_of_stock" title="'+ msgAvailableLater +'"></span>' : '' : '')+
                    (selectedData.description ? '<small class="dd-selected-description dd-desc' + (settings.truncateDescription ? ' dd-selected-description-truncated' : '') + '" >' + selectedData.description + '</small>' : '')
                    );

        }
        //Else only display text as selection
        else if (selectedData.text) {
            ddSelected.html(formatedTextItem(selectedData.text));
        }

        //Updating selected option value
        ddSelectedValue.val(selectedData.value);

        //BONUS! Update the original element attribute with the new selection
        pluginData.original.val(selectedData.value);
        obj.data('ddslick', pluginData);

        //Close options on selection
        close(obj);

        //Adjust appearence for selected option
        adjustSelectedHeight(obj);

        //Callback function on selection
        if (typeof settings.onSelected == 'function') {
            settings.onSelected.call(this, pluginData);
        }
    }

    //Private: Close the drop down options
    function open(obj) {

        var $this = obj.find('.dd-select'),
                ddOptions = $this.siblings('.dd-options'),
                ddPointer = $this.find('.dd-pointer'),
                wasOpen = ddOptions.is(':visible');

        //Close all open options (multiple plugins) on the page
        $('.dd-click-off-close').not(ddOptions).slideUp(50);
        $('.dd-pointer').removeClass('dd-pointer-up');

        if (wasOpen) {
            ddOptions.slideUp('fast');
            ddPointer.removeClass('dd-pointer-up');
        } else {
            ddOptions.slideDown('fast');
            ddPointer.addClass('dd-pointer-up');
        }

        //Fix text height (i.e. display title in center), if there is no description
        adjustOptionsHeight(obj);
    }

    //Private: Close the drop down options
    function close(obj) {
        //Close drop down and adjust pointer direction
        obj.find('.dd-options').slideUp(50);
        obj.find('.dd-pointer').removeClass('dd-pointer-up').removeClass('dd-pointer-up');
    }

    //Private: Adjust appearence for selected option (move title to middle), when no desripction
    function adjustSelectedHeight(obj) {

        //Get height of dd-selected
        var lSHeight = obj.find('.dd-select').css('height');

        //Check if there is selected description
        var descriptionSelected = obj.find('.dd-selected-description');
        var imgSelected = obj.find('.dd-selected-image');
        if (descriptionSelected.length <= 0 && imgSelected.length > 0) {
            obj.find('.dd-selected-text').css('lineHeight', lSHeight);
        }
    }

    //Private: Adjust appearence for drop down options (move title to middle), when no desripction
    function adjustOptionsHeight(obj) {
        obj.find('.dd-option').each(function () {
            var $this = $(this);
            var lOHeight = $this.css('height');
            var descriptionOption = $this.find('.dd-option-description');
            var imgOption = obj.find('.dd-option-image');
            if (descriptionOption.length <= 0 && imgOption.length > 0) {
                $this.find('.dd-option-text').css('lineHeight', lOHeight);
            }
        });
    }

    // Format again title of accessory, add more line through in old price.
    function formatedTextItem(textItem)
    {
        var arrayTextItem = textItem.split("|");
        var formatedText = ' <label class="dd-option-text">';
        formatedText = formatedText + arrayTextItem[0];
        if (typeof arrayTextItem[1] !== 'undefined') {// old price
            if (typeof arrayTextItem[2] !== 'undefined') {// new price
                formatedText = formatedText + ' <span style="text-decoration: line-through;color: grey;">' + arrayTextItem[1] + '</span>' + arrayTextItem[2];
            } else {
                formatedText = formatedText + arrayTextItem[1];
            }
        }
        formatedText = formatedText + ' </label>';
        return formatedText;
    }

})(jQuery);
//jquery.visible.js
(function ($) {

    /**
     * Copyright 2012, Digital Fusion
     * Licensed under the MIT license.
     * http://teamdf.com/jquery-plugins/license/
     *
     * @author Sam Sehnert
     * @desc A small plugin that checks whether elements are within
     *       the user visible viewport of a web browser.
     *       only accounts for vertical position, not horizontal.
     */
    var $w = $(window);
    $.fn.visible = function (partial, hidden, direction) {

        if (this.length < 1)
            return;

        var $t = this.length > 1 ? this.eq(0) : this,
                t = $t.get(0),
                vpWidth = $w.width(),
                vpHeight = $w.height(),
                direction = (direction) ? direction : 'both',
                clientSize = hidden === true ? t.offsetWidth * t.offsetHeight : true;

        if (typeof t.getBoundingClientRect === 'function') {

            // Use this native browser method, if available.
            var rec = t.getBoundingClientRect(),
                    tViz = rec.top >= 0 && rec.top < vpHeight,
                    bViz = rec.bottom > 0 && rec.bottom <= vpHeight,
                    lViz = rec.left >= 0 && rec.left < vpWidth,
                    rViz = rec.right > 0 && rec.right <= vpWidth,
                    vVisible = partial ? tViz || bViz : tViz && bViz,
                    hVisible = partial ? lViz || rViz : lViz && rViz;

            if (direction === 'both')
                return clientSize && vVisible && hVisible;
            else if (direction === 'vertical')
                return clientSize && vVisible;
            else if (direction === 'horizontal')
                return clientSize && hVisible;
        } else {

            var viewTop = $w.scrollTop(),
                    viewBottom = viewTop + vpHeight,
                    viewLeft = $w.scrollLeft(),
                    viewRight = viewLeft + vpWidth,
                    offset = $t.offset(),
                    _top = offset.top,
                    _bottom = _top + $t.height(),
                    _left = offset.left,
                    _right = _left + $t.width(),
                    compareTop = partial === true ? _bottom : _top,
                    compareBottom = partial === true ? _top : _bottom,
                    compareLeft = partial === true ? _right : _left,
                    compareRight = partial === true ? _left : _right;

            if (direction === 'both')
                return !!clientSize && ((compareBottom <= viewBottom) && (compareTop >= viewTop)) && ((compareRight <= viewRight) && (compareLeft >= viewLeft));
            else if (direction === 'vertical')
                return !!clientSize && ((compareBottom <= viewBottom) && (compareTop >= viewTop));
            else if (direction === 'horizontal')
                return !!clientSize && ((compareRight <= viewRight) && (compareLeft >= viewLeft));
        }
    };

})(jQuery);

//hsma_render_accessories.js
/**
 * Multi accessories for PrestaShop
 *
 * @author    PrestaMonster
 * @copyright PrestaMonster
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 * 
 * Render accessories of product in product list
 * @param {json} ajaxRenderAccessoriesUrl
 * @returns {Object} {HsmaRenderAccessories}
 */

var HsmaRenderAccessories = function (ajaxRenderAccessoriesUrl)
{

    this._ajaxRenderAccessoriesUrl = ajaxRenderAccessoriesUrl ? ajaxRenderAccessoriesUrl : null;

    /**
     * Define all params default of this class
     */
    this._params = {
    };

    /**
     * Define array selectors
     */
    this._selectors = {
        idProduct: '#product_page_product_id', // id input hidden contain id product
        classAjaxBlockProduct: '.js-product-miniature', // define block product
        ajaxAddToCartButton: '.ajax_add_to_cart_button' // define class add to cart
    };

    this.synUrl = function (url)
    {
        var synUrl = '';
        if (typeof url !== 'undefined')
            synUrl = url.indexOf('https:') > -1 ? url.replace("https:", document.location.protocol) : url.replace("http:", document.location.protocol);
        return synUrl;
    };

    HsmaRenderAccessories.instance = this;

    this.init = function ()
    {
        //this._initListDataAccessories();
        var idProducts = HsmaRenderAccessories.instance._initListDataAccessories();
        if (idProducts.length > 0) {
            HsmaRenderAccessories.instance._renderAccessories(idProducts);
        }
        // For case filter categories
        $(document).ajaxComplete(function (event, xhr, settings) {
            if (typeof xhr.responseJSON !== 'undefined' && typeof xhr.responseJSON.label !== 'undefined' && xhr.responseJSON.label.length > 0)
            {
                var idProducts =  HsmaRenderAccessories.instance._initListDataAccessories();
                if (idProducts.length > 0) {
                    HsmaRenderAccessories.instance._renderAccessories(idProducts);
                }
            }

        });
    };

    /**
     * Loop all list products
     */
    this._initListDataAccessories = function () {
        var idProducts = new Array();
        $(this._selectors.classAjaxBlockProduct).each(function () {
            var idProduct = HsmaRenderAccessories.instance._getIdProduct(this);
            if (parseInt(idProduct) > 0) {
                idProducts.push(idProduct);
            }
        });
        return idProducts;
    };

    this._renderAccessories = function (idProducts)
    {
        if (!idProducts)
            return;
        $.ajax({
            type: 'POST',
            headers: {"cache-control": "no-cache"},
            url: HsmaRenderAccessories.instance._ajaxRenderAccessoriesUrl,
            async: true,
            cache: false,
            dataType: "json",
            data: {
                'ajax': true,
                'id_products': idProducts,
                'action': 'renderAccessories'
            },
            success: function (jsonData)
            {
                $(HsmaRenderAccessories.instance._selectors.classAjaxBlockProduct).each(function () {
                    var idProduct = HsmaRenderAccessories.instance._getIdProduct(this);
                    var buttonAddtoCart = this;
                    if (parseInt(idProduct) > 0) {
                        if (jsonData.show_total_price) {
                            $.each(jsonData.total_price, function (idProductRender, value) {
                                if (parseInt(idProduct) === parseInt(idProductRender)) {
                                    $(buttonAddtoCart).find('.product-price-and-shipping .price').html(value);
                                }
                            });
                            $.each(jsonData.total_price_without_discount, function (idProductRender, value) {
                                if (parseInt(idProduct) === parseInt(idProductRender)) {
                                    if ($(buttonAddtoCart).find('.product-price-and-shipping span').hasClass('regular-price')) {
                                        $(buttonAddtoCart).find('.product-price-and-shipping .regular-price').html(value);
                                    } else {
                                        var blockPrice = $(buttonAddtoCart).find('.product-price-and-shipping .price');
                                        var showDiscountPrice = '<span class="regular-price" style="padding-right:5px;">'+value+'</span>';
                                        $(showDiscountPrice).insertBefore(blockPrice);
                                    }
                                }
                            });
                        }
                        $.each(jsonData.accessories, function (idProductRender, value) {
                            if (parseInt(idProduct) === parseInt(idProductRender)) {
                                $(buttonAddtoCart).find(HsmaRenderAccessories.instance._selectors.ajaxAddToCartButton).attr('data-id-accessories', value.id_accessories);
                                $(buttonAddtoCart).find(HsmaRenderAccessories.instance._selectors.ajaxAddToCartButton).attr('data-id-accessories-combination', value.id_accessories_combination);
                                $(buttonAddtoCart).find(HsmaRenderAccessories.instance._selectors.ajaxAddToCartButton).attr('data-custom-qty', value.custom_qty);
                            }
                        });
                    }
                });
            }
        });
    };


    this._getIdProduct = function (element) {
        return parseInt($(element).data('id-product'));
    };
};

$(document).ready(function () {

    adminProductSetting = new AdminProductSetting({});
    if (typeof accessoriesTablePrice !== 'undefined') {
        priceTable = new PriceTable({
            products: accessoriesTablePrice,
            randomMainProductId: randomMainProductId,
            changeMainPrice: changeMainPrice,
            subTotal: subTotal,
            showTablePrice: showTablePrice,
            showCombination: showCombination,
            showOptionImage: showOptionImage,
            warningOutOfStock: warningOutOfStock,
            warningNotEnoughProduct: warningNotEnoughProduct,
            warningCustomQuantity: warningNotEnoughProduct
        });
        priceTable.onLoad();
    }
    if (isEnablingOptionBuyToGether) {
        new HsmaRenderAccessories(
                ajaxRenderAccessoriesUrl
                ).init();
    }
});